import paseo.*
describe "test de una familia que NO pasea" {

//NOTA: Este fixture está incompleto y sirve para comenzar a testear el examen.
//Es a modo de ayuda, pero no es obligatorio respetar este escenario. 
// Puede modificarse tanto como sea necesario.

	var mediaIzquierdaZoe = new PrendaIzquierda (desgaste = 1, talle = s, comodidad=7 , abrigo= 2) //elemento de par
	var mediaDerechaZoe = new PrendaDerecha (desgaste = 3, talle = s, comodidad= 9 , abrigo= 2)
	
	//prenda par, el izquierdo y derecho tiene los valores default (desgaste 0, abrigo 1)
	var zapatillaIzquierdaZoe = new PrendaIzquierda (desgaste = 0, talle = s, comodidad= 8 , abrigo= 2)
	var zapatillaDerechaZoe = new PrendaDerecha (desgaste = 0, talle = s, comodidad= 8 , abrigo= 2)
	
	//prenda pesada con 5 de abrigo
	var jeanZoe = new PrendaPesada(talle=s, abrigo=5, comodidad= 11, desgaste = 3) 
	
	//prenda liviana con desgaste default: 0
	var remeraZoe = new PrendaLiviana(talle=s, desgaste = 0, comodidad= 10 , abrigo= 1) 
	
	// prenda pesada con desgaste default: 0
	var camperaZoe = new PrendaPesada(talle=s, desgaste = 0, comodidad= 8 , abrigo= 3) 

	//un juguete para niños de 5 a 100 anios
	var ukelele = new Juguete(edadMinima=5, edadMaxima=100)
	
	//prenda liviana con un desgaste de 5
	var remeraMilena = new PrendaLiviana(talle=xs, desgaste=5, comodidad= 10 , abrigo= 1) //prenda liviana
	
	//prenda liviana con desgaste default: 0
	var calzaMilena = new PrendaLiviana(talle=xs, desgaste=0, comodidad= 10 , abrigo= 1) //prenda liviana

	//prenda par, la ojota izquierda tiene que tener 1 de desgaste y 2 de abrigo, la ojota derecha tiene 3 de desgaste y 3 de abrigo
    var ojotaIzquierdaMilena = new PrendaIzquierda (desgaste = 1, talle = s, comodidad= -2 , abrigo= 2)
	var ojotaDerechaMilena = new PrendaDerecha (desgaste = 3, talle = s, comodidad= 0 , abrigo= 3)

	
	//ninio
	var zoe = new Ninio(talle=s, edad=11, prendas=#{mediaIzquierdaZoe, mediaDerechaZoe, zapatillaIzquierdaZoe, zapatillaDerechaZoe, jeanZoe, remeraZoe, camperaZoe }, juguete = null) 
	//ninio problematico
	var milena = new Ninio(talle=xs, edad=2, prendas = #{remeraMilena, calzaMilena, ojotaIzquierdaMilena,ojotaDerechaMilena }, juguete=ukelele)
	
	//familia	
	var familiaAptaSalir = new Familia(ninios = #{ zoe})

	//familia	
	var familiaNoAptaParaSalir= new Familia(ninios = #{milena, zoe})
	
	
//PUNTO 1	
	test "comodidad" {
		
		assert.equals(6 , mediaIzquierdaZoe.comodidadFinal() )
		assert.equals(6 , mediaDerechaZoe.comodidadFinal() )
		assert.equals(8 , zapatillaIzquierdaZoe.comodidadFinal() )
		assert.equals(8 , zapatillaDerechaZoe.comodidadFinal())
		assert.equals(8 , jeanZoe.comodidadFinal())
		assert.equals(10 , remeraZoe.comodidadFinal())
		assert.equals(8 , camperaZoe.comodidadFinal())
		assert.equals(7 , remeraMilena.comodidadFinal())		
		assert.equals(10 , calzaMilena.comodidadFinal())
		assert.equals(-3 , ojotaIzquierdaMilena.comodidadFinal())
		assert.equals(-3 , ojotaDerechaMilena.comodidadFinal())
		
	}

////PUNTO 2		
//	test "intercambiar pares ok" {
//		// por la estructura de mi metodo no se como adaptar el test para que sea funcional
//		
//		var mediaIzq = mediaIzquierdaZoe
//		var mediaDer = mediaDerechaZoe
//		var zapaIzq = zapatillaIzquierdaZoe
//		var zapaDer = zapatillaDerechaZoe
//		var listaDePrendasIntercambiablesdeZoe = #{mediaDerechaZoe, zapatillaDerechaZoe, mediaIzquierdaZoe, zapatillaIzquierdaZoe}
//		var listaDePrendasIntercambiablesDeMilena = #{ojotaIzquierdaMilena, ojotaDerechaMilena}
//		
//		listaDePrendasIntercambiables.intercambiarPrendas(mediaDerechaZoe, zapatillaDerechaZoe, mediaIzquierdaZoe, zapatillaIzquierdaZoe)
//
//		assert.equals(mediaIzq, mediaIzquierdaZoe)
//		assert.equals(mediaDer, zapatillaDerechaZoe)
//		assert.equals(zapaIzq, zapatillaIzquierdaZoe)
//		assert.equals(zapaDer, mediaDerechaZoe)
//				
//	}
//	
//	
//	// por la estructura de mi metodo no se como adaptar el test para que sea funcional
//	test "intercambiar pares no ok" {
//		//Que sucede si intercambio un par de talles distinto?
//		//probar el cambio entre las ojotas de milena y las medias de zoe
//		//El test está incompleto!
//		ojotasMilena.intercambiar(mediasZoe)
//	}

//PUNTO 3	

  //otra vez no se como adaptar las prendas dobles al test por el formato de mi metodo, igual el calculo debería de dar bien

	test "nivel de abrigo" {
	//	assert.equals(2 , abrigoDePrendaDoble(mediaIzquierdaZoe,mediaDerechaZoe))
    //  assert.equals(2 , abrigoDePrendaDoble(zapatillaIzquierdaZoe,zapatillaDerechaZoe))
		assert.equals(5 , jeanZoe.abrigo())
		assert.equals(1 , remeraZoe.abrigo())
		assert.equals(3 , camperaZoe.abrigo())
		assert.equals(1 , remeraMilena.abrigo())		
		assert.equals(1 , calzaMilena.abrigo())
	//	assert.equals(5 , abrigoDePrendaDoble(ojotaIzquierdaMilena,ojotaDerechaMilena))
	}
//
////PUNTO 4		
	test "puede salir de paseo" {
		assert.that(familiaAptaSalir.puedeSalirDePaseo())
		assert.notThat(familiaNoAptaParaSalir.puedeSalirDePaseo())
	}
	
////PUNTO 5
	
	test "infaltables" {
		assert.equals(#{jeanZoe,calzaMilena}, familiaNoAptaParaSalir.conjuntosInfaltables())		
	}
//	test "chiquitos" {
//		assert.equals(#{milena}, familiaNoAptaParaSalir.chiquitos()
//		)		
//	}
//	
////PUNTO 6	
//test "salir de paseo ok" {
//		familiaAptaSalir.pasear()
//		assert.equals(1.8 , mediaIzquierda.desgaste())
//		assert.equals(4.2 , mediaDerecha.desgaste())
//		assert.equals(3 , mediasZoe.desgaste())
//		assert.equals(1 , zapatillasZoe.desgaste())
//		assert.equals(1 , jeanZoe.desgaste())
//		assert.equals(1 , remeraZoe.desgaste())
//		assert.equals(1 , camperaZoe.desgaste())
//		
//	}
////PUNTO 7	
//	test "salir de paseo no ok" {
//		//Que sucede si le pido pasear a una familia que no está lista?
//		//El test está incompleto!
//		familiaNoAptaParaSalir.pasear()
//	}
//	
//	
}